"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactEventListener = _interopRequireDefault(require("react-event-listener"));

var _ownerDocument = _interopRequireDefault(require("../utils/ownerDocument"));

var _reactHelpers = require("../utils/reactHelpers");

// @inheritedComponent EventListener
function useMountedRef() {
  var mountedRef = _react.default.useRef(false);

  _react.default.useEffect(function () {
    mountedRef.current = true;
    return function () {
      mountedRef.current = false;
    };
  }, []);

  return mountedRef;
}
/**
 * Listen for click events that occur somewhere in the document, outside of the element itself.
 * For instance, if you need to hide a menu when people click anywhere else on your page.
 */


function ClickAwayListener(props) {
  var children = props.children,
      mouseEvent = props.mouseEvent,
      touchEvent = props.touchEvent,
      onClickAway = props.onClickAway,
      other = (0, _objectWithoutProperties2.default)(props, ["children", "mouseEvent", "touchEvent", "onClickAway"]);
  var mountedRef = useMountedRef();

  var movedRef = _react.default.useRef(false);

  var nodeRef = _react.default.useRef(); // can be removed once we drop support for non ref forwarding class components


  var handleOwnRef = _react.default.useCallback(function (ref) {
    nodeRef.current = _reactDom.default.findDOMNode(ref);
  }, []);

  var handleRef = (0, _reactHelpers.useForkRef)(children.ref, handleOwnRef);

  var handleClickAway = _react.default.useCallback(function (event) {
    // Ignore events that have been `event.preventDefault()` marked.
    if (event.defaultPrevented) {
      return;
    } // IE 11 support, which trigger the handleClickAway even after the unbind


    if (!mountedRef.current) {
      return;
    } // Do not act if user performed touchmove


    if (movedRef.current) {
      movedRef.current = false;
      return;
    }

    var node = nodeRef.current; // The child might render null.

    if (!node) {
      return;
    }

    var doc = (0, _ownerDocument.default)(node);

    if (doc.documentElement && doc.documentElement.contains(event.target) && !node.contains(event.target)) {
      onClickAway(event);
    }
  }, [mountedRef, onClickAway]);

  var handleTouchMove = _react.default.useCallback(function () {
    movedRef.current = true;
  }, []);

  var listenerProps = {};

  if (mouseEvent !== false) {
    listenerProps[mouseEvent] = handleClickAway;
  }

  if (touchEvent !== false) {
    listenerProps[touchEvent] = handleClickAway;
    listenerProps.onTouchMove = handleTouchMove;
  }

  return _react.default.createElement(_react.default.Fragment, null, _react.default.cloneElement(children, {
    ref: handleRef
  }), _react.default.createElement(_reactEventListener.default, (0, _extends2.default)({
    target: "document"
  }, listenerProps, other)));
}

process.env.NODE_ENV !== "production" ? ClickAwayListener.propTypes = {
  /**
   * The wrapped element.
   *
   * ⚠️The component used as a child [must be able to hold a ref](/guides/composition/#children).
   */
  children: _propTypes.default.element.isRequired,

  /**
   * The mouse event to listen to. You can disable the listener by providing `false`.
   */
  mouseEvent: _propTypes.default.oneOf(['onClick', 'onMouseDown', 'onMouseUp', false]),

  /**
   * Callback fired when a "click away" event is detected.
   */
  onClickAway: _propTypes.default.func.isRequired,

  /**
   * The touch event to listen to. You can disable the listener by providing `false`.
   */
  touchEvent: _propTypes.default.oneOf(['onTouchStart', 'onTouchEnd', false])
} : void 0;
ClickAwayListener.defaultProps = {
  mouseEvent: 'onMouseUp',
  touchEvent: 'onTouchEnd'
};
var _default = ClickAwayListener;
exports.default = _default;