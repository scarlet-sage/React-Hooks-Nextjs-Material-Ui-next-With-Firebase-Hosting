import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
// @inheritedComponent List
import React from 'react';
import PropTypes from 'prop-types';
import ReactDOM from 'react-dom';
import warning from 'warning';
import ownerDocument from '../utils/ownerDocument';
import List from '../List';
import getScrollbarSize from '../utils/getScrollbarSize';
import { useForkRef } from '../utils/reactHelpers';

function resetTabIndex(list, selectedItem, setCurrentTabIndex) {
  var currentFocus = ownerDocument(list).activeElement;
  var items = [];

  for (var i = 0; i < list.children.length; i += 1) {
    items.push(list.children[i]);
  }

  var currentFocusIndex = items.indexOf(currentFocus);

  if (currentFocusIndex !== -1) {
    return setCurrentTabIndex(currentFocusIndex);
  }

  if (selectedItem) {
    return setCurrentTabIndex(items.indexOf(selectedItem));
  }

  return setCurrentTabIndex(0);
}

var MenuList = React.forwardRef(function MenuList(props, ref) {
  var actions = props.actions,
      children = props.children,
      className = props.className,
      onBlur = props.onBlur,
      onKeyDown = props.onKeyDown,
      disableListWrap = props.disableListWrap,
      other = _objectWithoutProperties(props, ["actions", "children", "className", "onBlur", "onKeyDown", "disableListWrap"]);

  var _React$useState = React.useState(null),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      currentTabIndex = _React$useState2[0],
      setCurrentTabIndex = _React$useState2[1];

  var blurTimeoutIDRef = React.useRef();
  var listRef = React.useRef();
  var selectedItemRef = React.useRef();
  React.useImperativeHandle(actions, function () {
    return {
      focus: function focus() {
        if (selectedItemRef.current) {
          selectedItemRef.current.focus();
          return;
        }

        if (listRef.current && listRef.current.firstChild) {
          listRef.current.firstChild.focus();
        }
      },
      getContentAnchorEl: function getContentAnchorEl() {
        if (selectedItemRef.current) {
          return selectedItemRef.current;
        }

        return listRef.current.firstChild;
      },
      adjustStyleForScrollbar: function adjustStyleForScrollbar(containerElement, theme) {
        // Let's ignore that piece of logic if users are already overriding the width
        // of the menu.
        var noExplicitWidth = !listRef.current.style.width;

        if (containerElement.clientHeight < listRef.current.clientHeight && noExplicitWidth) {
          var scrollbarSize = "".concat(getScrollbarSize(true), "px");
          listRef.current.style[theme.direction === 'rtl' ? 'paddingLeft' : 'paddingRight'] = scrollbarSize;
          listRef.current.style.width = "calc(100% + ".concat(scrollbarSize, ")");
        }

        return listRef.current;
      }
    };
  }, []);
  React.useEffect(function () {
    resetTabIndex(listRef.current, selectedItemRef.current, setCurrentTabIndex);
    return function () {
      clearTimeout(blurTimeoutIDRef.current);
    };
  }, []);

  var handleBlur = function handleBlur(event) {
    blurTimeoutIDRef.current = setTimeout(function () {
      if (listRef.current) {
        var list = listRef.current;
        var currentFocus = ownerDocument(list).activeElement;

        if (!list.contains(currentFocus)) {
          resetTabIndex(list, selectedItemRef.current, setCurrentTabIndex);
        }
      }
    }, 30);

    if (onBlur) {
      onBlur(event);
    }
  };

  var handleKeyDown = function handleKeyDown(event) {
    var list = listRef.current;
    var key = event.key;
    var currentFocus = ownerDocument(list).activeElement;

    if ((key === 'ArrowUp' || key === 'ArrowDown') && (!currentFocus || currentFocus && !list.contains(currentFocus))) {
      if (selectedItemRef.current) {
        selectedItemRef.current.focus();
      } else {
        list.firstChild.focus();
      }
    } else if (key === 'ArrowDown') {
      event.preventDefault();

      if (currentFocus.nextElementSibling) {
        currentFocus.nextElementSibling.focus();
      } else if (!disableListWrap) {
        list.firstChild.focus();
      }
    } else if (key === 'ArrowUp') {
      event.preventDefault();

      if (currentFocus.previousElementSibling) {
        currentFocus.previousElementSibling.focus();
      } else if (!disableListWrap) {
        list.lastChild.focus();
      }
    } else if (key === 'Home') {
      event.preventDefault();
      list.firstChild.focus();
    } else if (key === 'End') {
      event.preventDefault();
      list.lastChild.focus();
    }

    if (onKeyDown) {
      onKeyDown(event);
    }
  };

  var handleItemFocus = function handleItemFocus(event) {
    var list = listRef.current;

    if (list) {
      for (var i = 0; i < list.children.length; i += 1) {
        if (list.children[i] === event.currentTarget) {
          setCurrentTabIndex(i);
          break;
        }
      }
    }
  };

  var handleOwnRef = React.useCallback(function (refArg) {
    // StrictMode ready
    listRef.current = ReactDOM.findDOMNode(refArg);
  }, []);
  var handleRef = useForkRef(handleOwnRef, ref);
  return React.createElement(List, _extends({
    role: "menu",
    ref: handleRef,
    className: className,
    onKeyDown: handleKeyDown,
    onBlur: handleBlur
  }, other), React.Children.map(children, function (child, index) {
    if (!React.isValidElement(child)) {
      return null;
    }

    process.env.NODE_ENV !== "production" ? warning(child.type !== React.Fragment, ["Material-UI: the MenuList component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n')) : void 0;
    return React.cloneElement(child, {
      tabIndex: index === currentTabIndex ? 0 : -1,
      ref: child.props.selected ? function (refArg) {
        // not StrictMode ready
        selectedItemRef.current = ReactDOM.findDOMNode(refArg);
      } : undefined,
      onFocus: handleItemFocus
    });
  }));
});
process.env.NODE_ENV !== "production" ? MenuList.propTypes = {
  /**
   * @ignore
   */
  actions: PropTypes.shape({
    current: PropTypes.object
  }),

  /**
   * MenuList contents, normally `MenuItem`s.
   */
  children: PropTypes.node,

  /**
   * @ignore
   */
  className: PropTypes.string,

  /**
   * If `true`, the menu items will not wrap focus.
   */
  disableListWrap: PropTypes.bool,

  /**
   * @ignore
   */
  onBlur: PropTypes.func,

  /**
   * @ignore
   */
  onKeyDown: PropTypes.func
} : void 0;
MenuList.defaultProps = {
  disableListWrap: false
};
export default MenuList;