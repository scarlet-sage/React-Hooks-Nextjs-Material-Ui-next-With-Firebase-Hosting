"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _warning = _interopRequireDefault(require("warning"));

var _ownerDocument = _interopRequireDefault(require("../utils/ownerDocument"));

var _List = _interopRequireDefault(require("../List"));

var _getScrollbarSize = _interopRequireDefault(require("../utils/getScrollbarSize"));

var _reactHelpers = require("../utils/reactHelpers");

// @inheritedComponent List
function resetTabIndex(list, selectedItem, setCurrentTabIndex) {
  var currentFocus = (0, _ownerDocument.default)(list).activeElement;
  var items = [];

  for (var i = 0; i < list.children.length; i += 1) {
    items.push(list.children[i]);
  }

  var currentFocusIndex = items.indexOf(currentFocus);

  if (currentFocusIndex !== -1) {
    return setCurrentTabIndex(currentFocusIndex);
  }

  if (selectedItem) {
    return setCurrentTabIndex(items.indexOf(selectedItem));
  }

  return setCurrentTabIndex(0);
}

var MenuList = _react.default.forwardRef(function MenuList(props, ref) {
  var actions = props.actions,
      children = props.children,
      className = props.className,
      onBlur = props.onBlur,
      onKeyDown = props.onKeyDown,
      disableListWrap = props.disableListWrap,
      other = (0, _objectWithoutProperties2.default)(props, ["actions", "children", "className", "onBlur", "onKeyDown", "disableListWrap"]);

  var _React$useState = _react.default.useState(null),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      currentTabIndex = _React$useState2[0],
      setCurrentTabIndex = _React$useState2[1];

  var blurTimeoutIDRef = _react.default.useRef();

  var listRef = _react.default.useRef();

  var selectedItemRef = _react.default.useRef();

  _react.default.useImperativeHandle(actions, function () {
    return {
      focus: function focus() {
        if (selectedItemRef.current) {
          selectedItemRef.current.focus();
          return;
        }

        if (listRef.current && listRef.current.firstChild) {
          listRef.current.firstChild.focus();
        }
      },
      getContentAnchorEl: function getContentAnchorEl() {
        if (selectedItemRef.current) {
          return selectedItemRef.current;
        }

        return listRef.current.firstChild;
      },
      adjustStyleForScrollbar: function adjustStyleForScrollbar(containerElement, theme) {
        // Let's ignore that piece of logic if users are already overriding the width
        // of the menu.
        var noExplicitWidth = !listRef.current.style.width;

        if (containerElement.clientHeight < listRef.current.clientHeight && noExplicitWidth) {
          var scrollbarSize = "".concat((0, _getScrollbarSize.default)(true), "px");
          listRef.current.style[theme.direction === 'rtl' ? 'paddingLeft' : 'paddingRight'] = scrollbarSize;
          listRef.current.style.width = "calc(100% + ".concat(scrollbarSize, ")");
        }

        return listRef.current;
      }
    };
  }, []);

  _react.default.useEffect(function () {
    resetTabIndex(listRef.current, selectedItemRef.current, setCurrentTabIndex);
    return function () {
      clearTimeout(blurTimeoutIDRef.current);
    };
  }, []);

  var handleBlur = function handleBlur(event) {
    blurTimeoutIDRef.current = setTimeout(function () {
      if (listRef.current) {
        var list = listRef.current;
        var currentFocus = (0, _ownerDocument.default)(list).activeElement;

        if (!list.contains(currentFocus)) {
          resetTabIndex(list, selectedItemRef.current, setCurrentTabIndex);
        }
      }
    }, 30);

    if (onBlur) {
      onBlur(event);
    }
  };

  var handleKeyDown = function handleKeyDown(event) {
    var list = listRef.current;
    var key = event.key;
    var currentFocus = (0, _ownerDocument.default)(list).activeElement;

    if ((key === 'ArrowUp' || key === 'ArrowDown') && (!currentFocus || currentFocus && !list.contains(currentFocus))) {
      if (selectedItemRef.current) {
        selectedItemRef.current.focus();
      } else {
        list.firstChild.focus();
      }
    } else if (key === 'ArrowDown') {
      event.preventDefault();

      if (currentFocus.nextElementSibling) {
        currentFocus.nextElementSibling.focus();
      } else if (!disableListWrap) {
        list.firstChild.focus();
      }
    } else if (key === 'ArrowUp') {
      event.preventDefault();

      if (currentFocus.previousElementSibling) {
        currentFocus.previousElementSibling.focus();
      } else if (!disableListWrap) {
        list.lastChild.focus();
      }
    } else if (key === 'Home') {
      event.preventDefault();
      list.firstChild.focus();
    } else if (key === 'End') {
      event.preventDefault();
      list.lastChild.focus();
    }

    if (onKeyDown) {
      onKeyDown(event);
    }
  };

  var handleItemFocus = function handleItemFocus(event) {
    var list = listRef.current;

    if (list) {
      for (var i = 0; i < list.children.length; i += 1) {
        if (list.children[i] === event.currentTarget) {
          setCurrentTabIndex(i);
          break;
        }
      }
    }
  };

  var handleOwnRef = _react.default.useCallback(function (refArg) {
    // StrictMode ready
    listRef.current = _reactDom.default.findDOMNode(refArg);
  }, []);

  var handleRef = (0, _reactHelpers.useForkRef)(handleOwnRef, ref);
  return _react.default.createElement(_List.default, (0, _extends2.default)({
    role: "menu",
    ref: handleRef,
    className: className,
    onKeyDown: handleKeyDown,
    onBlur: handleBlur
  }, other), _react.default.Children.map(children, function (child, index) {
    if (!_react.default.isValidElement(child)) {
      return null;
    }

    process.env.NODE_ENV !== "production" ? (0, _warning.default)(child.type !== _react.default.Fragment, ["Material-UI: the MenuList component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n')) : void 0;
    return _react.default.cloneElement(child, {
      tabIndex: index === currentTabIndex ? 0 : -1,
      ref: child.props.selected ? function (refArg) {
        // not StrictMode ready
        selectedItemRef.current = _reactDom.default.findDOMNode(refArg);
      } : undefined,
      onFocus: handleItemFocus
    });
  }));
});

process.env.NODE_ENV !== "production" ? MenuList.propTypes = {
  /**
   * @ignore
   */
  actions: _propTypes.default.shape({
    current: _propTypes.default.object
  }),

  /**
   * MenuList contents, normally `MenuItem`s.
   */
  children: _propTypes.default.node,

  /**
   * @ignore
   */
  className: _propTypes.default.string,

  /**
   * If `true`, the menu items will not wrap focus.
   */
  disableListWrap: _propTypes.default.bool,

  /**
   * @ignore
   */
  onBlur: _propTypes.default.func,

  /**
   * @ignore
   */
  onKeyDown: _propTypes.default.func
} : void 0;
MenuList.defaultProps = {
  disableListWrap: false
};
var _default = MenuList;
exports.default = _default;